#include <msp430g2553.h>



// Blink time constants                                 //define counter1 (CTR1) a constant value significantly less than counter2 (CTR2)
                                                        // for distinct delay between the red and green LEDs; creates distinct blink,
                                                        // red LED blinks faster


#define CTR1 3000

#define CTR2 5000

// led bit assignment
#define LED1 BIT0                                          // corresponds to the zeroth bit of port1, P1.0, red LED defined constant as LED1
                                                            // for easier reference through program; green LED2 defined as BIT6, P1.6

#define LED2 BIT6



void main(void)

{

int i,j; // initialization of variables which are responsible for the delay

WDTCTL = WDTPW + WDTHOLD; // Disable watchdog timer, watch dog timer prevents code from getting stuck in an infinite loop
                           // Since getting stuck in an infinite loop is not a concern for this application, it is disabled to prevent
                           // the device from resetting 

P1DIR |= (LED1|LED2); // Since on the MSP430G2553, LED1 and LED2 are both within port 1, both can be enabled as outputs within the same line

i=j=0;

for(;;)

{ // increase the initialized counter variables i, and j

  i++;

  j++;

  
// increases both variables such that they count until their condition is met
// prior to condition being met, if incremented variable is greater than the defined constant counter
// both if statements execute toggleable LEDS and loop indefinitely on and off due to being within nested,
// indefinite, For loop



  if (i>CTR1)

      { i=0; P1OUT^=LED1;}


  if (j>CTR2)
  
  // Setting both i and j to zero essentially resets the counter variables once the condition is met and they have counted well
  // above the defined CTR1 and CTR2 values; For example, both i and j are incremented, icondition is met; (i is incremented to such
  // a value that i is greater than 3000, i is reset, and the LED is toggled by using the bitwise XOR operation

     { j=0; P1OUT^=LED2;}

} 
// void, loops indefinitely
}
