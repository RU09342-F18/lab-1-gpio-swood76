#include "msp.h"


//#include <msp430.h>


/**
 * This code demonstrates the simple blink on the MSP432P401R
 * main.c
 */
volatile unsigned int i = 0;            // variable which acts as counter between LED toggles defined as volatile
                                        // to prevent compiler from wanting to optimize code and possibly not go through infinite for loop
                                        // and the toggled blink effect will never occur
void main(void)
{
    WDTCTL = WDTPW + WDTHOLD;               //Disabled the watchdog timer, which acts as a safe guard from getting stuck in an infinite for loop 

    P1DIR |= 00000001;                       // Next line is meant to configure the general-purpose input/out pin, this is accomplished by enabling the direction register of the port pin as an input or output.
                                            //For example, the port pin P1â€™s direction register is enabled as an output by it setting equal to P1DIR 
                                           //  (eight-bit direction register) bitwise OR with 1,
                                           // which can be seen in this line as hardcoding the bit mask to 0000 0001

    for (;;)                                // For loop with no parameters allow for the contents to with to repeat infinitely
    {
        P1OUT ^= 0x01;
        // Toggle P1.0 using exclusive-OR operation (^=)
        
        //Next to accomplish the actual blink effect of the bright red LED, 
        //another bitwise operation is done on another register, which is P1OUT,
        //and can be alternated between states of on and off by simply using the exclusive OR operation over some delay, with a respective
        // '1' or '0'

        for(i=0; i< 20000; i++);            // Counter which essentially create delay between the LED toggles created by the bit
                                            // operation of P1OUT ^= 0x01
    }
}

